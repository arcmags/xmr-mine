#!/bin/bash
##==============================  xmr-mine  ==============================##
# Copyright (C) 2017 arcmags                 GNU General Public License v3 #
##========================================================================##
# Basic wrapper script for xmr-stak.

miner_help() {
cat <<'EODOC'
NAME
    xmr-mine

SYNOPSIS
    xmr-mine [ARGUMENTS]

DESCRIPTION
    Wrapper script for xmr-stak.  Check for internet connection and
    system clock sync.  Check processor for AES support.
    Check if xmr-stak is already running.  Build config.txt from
    command line arguments and xmr-mine.conf file.  Launch xmr-stak.

REQUIREMENTS
    xmr-stak
        Monero unified CPU/GPU pool miner.

    timedatectl set-ntp true
        This script ensures system clock is synced via the systemd-
        timesyncd.service before launching xmr-stak.

OPTIONS
    --background, -B
        Launch xmr-stak in daemon mode and fork to background.

    --currency, -C <currency>
        Specify currency to mine for.

    --dryrun, D
        Run script and generate config.txt without launching xmr-stak

    --help
        Print help.

    --kill, -K
        Kill any instances of xmr-stak.

    --name, --pass <POOL PASSWORD>
        Password used to identify miner.  $HOSTNAME is used if no
        password is specified.

    --pool, -p <ADDRESS:PORT>
        Specify default pool address and port number.  Pool is added
        to the list of pools and given the highest weight.

    --quiet, -Q
        Launch xmr-stak in daemon mode.  Pipe all output to /dev/null.

    --random-pool, -R
        Randomize pool weights.

    --show-status, -S
        Print current pool status and hash rate.

    --wallet, -w <ADDRESS>
        Specify wallet address to mine to.

ENVIRONMENT VARIABLES
    MINER_CONFIG_DIR
        Directory containing any xmr-stak configuration files.
        ~/.xmr-mine is used by default if left unset.

CONFIGURATION
    Wallet and pool information can be specified in
    $MINER_CONFIG_DIR/xmr-mine.conf.  Any number of currencies and pools
    can be added.  Default currency is set by MINER_CURRENCY or can be
    overriden by the --currency option.

    Every xmr-stak config.txt variable is set in the XMR-STAK SETTINGS
    section of this script.  These are used to build config.txt upon every
    run unless a config file is specified.

SEE ALSO
    https://github.com/arcmags/xmr-mine
    https://github.com/fireice-uk/xmr-stak
EODOC
exit 0
}


##===========================  VARIABLES  ============================##
MINER_NAME=
MINER_CURRENCY=
MINER_WALLET=
MINER_ACTION=
MINER_POOLS=()
MINER_CONFIG_DIR="${MINER_CONFIG_DIR:-$HOME/.xmr-mine}"
MINER_CONFIG="$MINER_CONFIG_DIR/xmr-mine.conf"
MINER_DIR='/tmp/xmr-mine'
# default xmr-stak config files:
XMR_STAK_CONFIG="$MINER_CONFIG_DIR/config.txt"
XMR_STAK_CONFIG_CPU="$MINER_CONFIG_DIR/cpu.txt"
XMR_STAK_CONFIG_NVIDIA="$MINER_CONFIG_DIR/nvidia.txt"
# script flags:
FLAG_DAEMON='false'
FLAG_DRYRUN='false'
FLAG_QUIET='false'
FLAG_RANDOM_POOL='false'
##=================  default xmr-stak settings  ==================##
# pool:
use_nicehash='false'
use_tls='false'
tls_fingerprint=''
# global:
currency='monero'
call_timeout=10
retry_time=30
giveup_limit=0
verbose_level=4
print_motd='false'
h_print_time=60
aes_override='null'
use_slow_memory='warn'
tls_secure_algo='true'
daemon_mode='false'
flush_stdout='false'
output_file=''
httpd_port=16000
http_login=''
http_pass=''
prefer_ipv4='true'


##===========================  FUNCTIONS  ============================##
# Check internet connection.
net_check() {
    if (ping -q -c 1 -W 3 google.com &> /dev/null) ||
    (ping -q -c 1 -W 5 archlinux.org &> /dev/null); then
        return 0
    else
        return 1
    fi
}

# Check system clock sync status.
ntp_check() {
    return `timedatectl | \
        grep 'timesyncd.service active: yes' >/dev/null`
}

# Printing functions.
miner_print() {
    if [ "$FLAG_QUIET" = 'false' ]; then
        printf ":: $1\n"
    fi
}
miner_error() {
    if [ "$FLAG_QUIET" = 'false' ]; then
        printf "!: $1\n"
    fi
}

# Kill miner (xmr-stak).
miner_kill() {
    if !(pgrep -x xmr-stak >/dev/null); then
        printf ":: not mining\n"
        exit 1
    fi
    pkill xmr-stak
    printf ":: killed xmr-stak\n"
    exit 0
}

# Print current pool status and hash rate.
miner_status() {
    if !(pgrep -x xmr-stak >/dev/null); then
        printf ":: not mining\n"
        exit 1
    fi
    local JSON="`curl -s $HOSTNAME:${httpd_port}/api.json`"
    local HASH_RATE="`printf "$JSON" | \
        grep -Po '"total": ?\[\K[^,]+(?=,)'`"
    if [ "$HASH_RATE" = 'null' ]; then
        HASH_RATE='no data yet'
    fi
    local POOL_ADDRESS="`printf "$JSON" | \
        grep -Po '"pool": ?"\K[^:]+(?=(:|"))'`"
    local UP_SECS="`printf "$JSON" | \
        grep -Po '"uptime": ?\K[0-9]+(?=,)'`"
    local UP_DAYS=$(( $UP_SECS / 86400 ))
    UP_SECS=$(( $UP_SECS % 86400 ))
    local UP_HOURS=$(( $UP_SECS / 3600 ))
    UP_SECS=$(( $UP_SECS % 3600 ))
    local UP_MINS=$(( $UP_SECS / 60 ))
    UP_SECS=$(( $UP_SECS % 60 ))
    local UP_TEXT=''
    if [ $UP_DAYS -gt 0 ]; then
        UP_TEXT="${UP_DAYS}d "
    fi
    UP_TEXT+="`printf "%02d:%02d:%02d" \
        $UP_HOURS $UP_MINS $UP_SECS`"
    local POOL_PING="`printf "$JSON" | \
        grep -Po '"ping": ?\K[0-9]+(?=,)'`"
    local POOL_PASSWORD="`cat "$MINER_DIR/config.txt" | \
        tr -d '\n' | \
        grep -Po ".*?\K{.*?${POOL_ADDRESS}.*?}(?=,)" | \
        grep -Pom1 '.*pool_password"\s?:\s?"\K[^"]*(?=")'`"
    local WALLET="`cat "$MINER_DIR/config.txt" | \
        tr -d '\n' | \
        grep -Po ".*?\K{.*?${POOL_ADDRESS}.*?}(?=,)" | \
        grep -Pom1 '.*wallet_address"\s?:\s?"\K[^"]*(?=")'`"
    printf ":: wallet: $WALLET\n"
    printf "     pool: $POOL_ADDRESS\n"
    printf "       id: $POOL_PASSWORD\n"
    printf "     ping: $POOL_PING\n"
    printf "   uptime: $UP_TEXT\n"
    printf " hashrate: $HASH_RATE\n"
    exit 0
}

config_trim() {
    grep -Pv '^\s*(\s*/|\s*\*|\s*$)' config.txt
    return 0
}


##=============================  SCRIPT  =============================##
MINER_ACTION='mine'

# parse args:
while [ -n "$1" ]; do case $1 in
    --background|-B)   FLAG_DAEMON='true'                     ;;
    --currency|-C)     shift; MINER_CURRENCY="$1"             ;;
    --dryrun|-D)       FLAG_DRYRUN='true'                     ;;
    --help)            MINER_ACTION='help'                    ;;
    --kill|-K)         MINER_ACTION='kill'                    ;;
    --pool|-p)         shift; MINER_POOLS+=( "$1" )           ;;
    --name|-N|--pass)  shift; MINER_NAME="$1"                 ;;
    --quiet|-Q|-I)     FLAG_QUIET='true'; FLAG_DAEMON='true'  ;;
    --random-pool|-R)  FLAG_RANDOM_POOL='true'                ;;
    --show-status|-S)  MINER_ACTION='status'                  ;;
    --wallet|-w)       shift; MINER_WALLET="$1"               ;;
    # FAIL: unrecognized option:
    *)  printf ":! unrecognized option: $1\n"; exit 5         ;;
esac; shift; done

# take miner actions other than mining:
case $MINER_ACTION in
    help)    miner_help    ;;
    kill)    miner_kill    ;;
    status)  miner_status  ;;
esac

# FAIL: no AES support:
if !(cat /proc/cpuinfo | grep -P 'flags\s*:.* aes( |$)' >/dev/null); then
    miner_error "CPU does not support AES"
    miner_print "unable to launch stak miner"
    exit 3
fi
# FAIL: xmr-stak already running:
if (pgrep -x xmr-stak >/dev/null); then
    miner_error "xmr-stak is already running"
    exit 2
fi
# FAIL: no internet connection:
if !(net_check); then
    miner_error "no internet connection"
    exit 1
fi
# FAIL: system clock not synced:
if !(ntp_check); then
    miner_error "system clock not synced"
    exit 1
fi

# parse miner name:
if [ -z "$MINER_NAME" ]; then
    MINER_NAME="`grep -Po '^ *MINER_NAME=\K[^ ]+' "$MINER_CONFIG"`"
    if [ -z "$MINER_NAME" ]; then
        MINER_NAME="$HOSTNAME"
    fi
fi

# parse currency:
if [ -z "$MINER_CURRENCY" ]; then
    MINER_CURRENCY="`grep -Po '^ *MINER_CURRENCY=\K[^ ]+' "$MINER_CONFIG"`"
    # FAIL: no currency specified:
    if [ -z "$MINER_CURRENCY" ]; then
        miner_error "no currency specified"
        exit 1
    fi
fi
MINER_CURRENCY="${MINER_CURRENCY^^}"
if [ "$MINER_CURRENCY" = 'AEON' ]; then
    currency='aeon'
fi

# parse wallet:
if [ -z "$MINER_WALLET" ]; then
    MINER_WALLET="`grep -Pom1 \
        "^ *${MINER_CURRENCY}_WALLET=\K[^ ]+" "$MINER_CONFIG"`"
    # FAIL: no wallet for specified currency:
    if [ -z "$MINER_WALLET" ]; then
        miner_error "no wallet for $MINER_CURRENCY"
        exit 1
    fi
fi

# parse pools:
MINER_POOLS+=( `grep -Po "^ *${MINER_CURRENCY}_POOL=\K[^ ]+" "$MINER_CONFIG"` )
# FAIL: no pools for specified currency:
if [ ${#MINER_POOLS[@]} -eq 0 ]; then
    miner_error "no pools for $MINER_CURRENCY"
    exit 1
fi
MINER_POOLS=( `for POOL in ${MINER_POOLS[@]}; \
    do printf "$POOL\n"; done | uniq` )
if [ "$FLAG_RANDOM_POOL" = 'true' ]; then
    MINER_POOLS=( `for POOL in ${MINER_POOLS[@]}; \
        do printf "$POOL\n"; done | sort -R` )
fi

# parse mode:
if [ "$FLAG_DAEMON" = 'true' ]; then
    daemon_mode='true'
    verbose_level=0
fi

# switch to clean miner directory:
mkdir -p "$MINER_DIR"
cd "$MINER_DIR"
rm -f config.txt cpu.txt nvidia.txt

# build config.txt:
CONFIG_TXT="\"pool_list\" :\n"
CONFIG_TXT+="[\n"
# add pools:
P=${#MINER_POOLS[@]}
for POOL in ${MINER_POOLS[@]}; do
    CONFIG_TXT+="  {\n"
    CONFIG_TXT+="    \"pool_address\" : \"$POOL\",\n"
    CONFIG_TXT+="    \"wallet_address\" : \"${MINER_WALLET}\",\n"
    CONFIG_TXT+="    \"pool_password\" : \"${MINER_NAME}\",\n"
    CONFIG_TXT+="    \"pool_weight\" : $P,\n"
    CONFIG_TXT+="    \"use_nicehash\" : $use_nicehash,\n"
    CONFIG_TXT+="    \"use_tls\" : $use_tls,\n"
    CONFIG_TXT+="    \"tls_fingerprint\" : \"$tls_fing1erprint\"\n"
    CONFIG_TXT+="  },\n"
    ((P--))
done
CONFIG_TXT+="],\n"
# add global settings:
CONFIG_TXT+="\"currency\" : \"$currency\",\n"
CONFIG_TXT+="\"call_timeout\" : $call_timeout,\n"
CONFIG_TXT+="\"retry_time\" : $retry_time,\n"
CONFIG_TXT+="\"giveup_limit\" : $giveup_limit,\n"
CONFIG_TXT+="\"verbose_level\" : $verbose_level,\n"
CONFIG_TXT+="\"print_motd\" : $print_motd,\n"
CONFIG_TXT+="\"h_print_time\" : $h_print_time,\n"
CONFIG_TXT+="\"aes_override\" : $aes_override,\n"
CONFIG_TXT+="\"use_slow_memory\" : \"$use_slow_memory\",\n"
CONFIG_TXT+="\"tls_secure_algo\" : $tls_secure_algo,\n"
CONFIG_TXT+="\"daemon_mode\" : $daemon_mode,\n"
CONFIG_TXT+="\"flush_stdout\" : $flush_stdout,\n"
CONFIG_TXT+="\"output_file\" : \"$output_file\",\n"
CONFIG_TXT+="\"httpd_port\" : $httpd_port,\n"
CONFIG_TXT+="\"http_login\" : \"$http_login\",\n"
CONFIG_TXT+="\"http_pass\" : \"$http_pass\",\n"
CONFIG_TXT+="\"prefer_ipv4\" : $prefer_ipv4,\n"
printf "$CONFIG_TXT" > config.txt

# use preexisting cpu.txt:
if [ -f "$XMR_STAK_CONFIG_CPU" ]; then
    cp "$XMR_STAK_CONFIG_CPU" ./cpu.txt
fi

# use gpu specific nvidia.txt:
GPU="`lspci | grep -Pom1 '^.*?VGA.+?controller:\s?\K.*'`"
CONFIG_FILES="`ls "$MINER_CONFIG_DIR"`"
for FILE in $CONFIG_FILES; do
    FILE_GPU="${FILE%.txt}"
    FILE_GPU="${FILE_GPU//_/ }"
    if [[ "$GPU" =~ "${FILE_GPU}" ]]; then
        cp "$FILE" ./nvidia.txt
    fi
done
if [ ! -f nvidia.txt ] && [ -f "$XMR_STAK_CONFIG_NVIDIA" ]; then
    cp "$XMR_STAK_CONFIG_NVIDIA" ./nvidia.txt
fi

# launch xmr-stak:
if [ "$FLAG_DRYRUN" = 'false' ]; then
    # daemon mode:
    if [ "$FLAG_DAEMON" = 'true' ]; then
        # daemon incognito mode:
        if [ "$FLAG_QUIET" = 'true' ]; then
            xmr-stak >/dev/null 2>&1 &
            sleep 2
        # daemon normal mode:
        else
            xmr-stak &
            sleep 2
            miner_print "xmr-stak forked to background PID: $!\n"
        fi
    # normal mode:
    else
        xmr-stak
    fi
fi

exit 0
