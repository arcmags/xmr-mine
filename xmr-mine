#!/bin/bash
##============================  xmr-mine  ============================##
# (C) 2019 Chris Magyar                  GNU General Public License v3 #
##====================================================================##
# Wrapper script for xmr-stak v2.7.1.

miner_help() {
cat <<'HELPDOC'
NAME
    xmr-mine

SYNOPSIS
    xmr-mine [OPTIONS]

DESCRIPTION
    Parse command line arguments.
    Check if already running.
    Check internet connection.
    Check processor for AES support.
    Use any preexisting config.txt, pools.txt, cpu.txt, nividia.txt.
    Use any device specific nivida config files.
    Build config.txt.
    Build pools.txt (source ~/.xmr-mine/xmr-mine.conf).
    Launch xmr-stak.

OPTIONS
    --background, -B
        Launch xmr-stak in daemon mode and fork to background.

    --currency, -c <currency>
        Set currency to mine for.  Any currency with a wallet and
        pool given in xmr-mine.conf may be used.

    --dryrun, -D
        Generate config.txt and pools.txt without launching xmr-stak.

    --help, -H
        Print help.

    --kill, -K
        Kill any instance of xmr-stak.

    --pass <POOL PASSWORD>
        Password used to identify miner.  $HOSTNAME is used if no
        password is specified.

    --pool, -p <ADDRESS:PORT>
        Add pool to pools.txt with highest weight.

    --proxy <ADDRESS:PORT>
        Specify xmr-node-proxy server address and port number.  Proxy
        is added to the list of pools with highest weight.

    --quiet, -Q
        Launch xmr-stak in daemon mode.  Pipe all output to /dev/null.

    --random-pool, -R
        Randomize pool weights.

    --rig, -r <RIG ID>
        Set rig_id (used by some pools).  Default is blank.

    --status, -S
        Print current pool status and hash rate.

    --wallet, -w <ADDRESS>
        Specify wallet address to mine to.

ENVIRONMENT VARIABLES
    MINER_CONFIG_DIR
        Directory containing any xmr-stak configuration files.
        ~/.config/xmr-mine is used by default if left unset.

CONFIGURATION
    Wallet and pool information can be specified in
    $MINER_CONFIG_DIR/xmr-mine.conf.  Any number of currencies and pools
    can be added.  Default currency is set by MINER_CURRENCY or can be
    overriden by the --currency option.

    Every xmr-stak config.txt variable is set in the XMR-STAK SETTINGS
    section of this script.  These are used to build config.txt upon
    every run unless a config file is specified.

REQUIREMENTS
    xmr-stak v2.7.1
        Monero unified CPU/GPU pool miner.

SEE ALSO
    https://github.com/arcmags/xmr-mine
    https://github.com/fireice-uk/xmr-stak
HELPDOC
exit 0
}


##===========================  VARIABLES  ============================##
DIR_SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# miner variables:
MINER_PASS=
MINER_RIG=
MINER_CURRENCY=
MINER_WALLET=
MINER_ACTION='mine'
MINER_POOLS=()
MINER_PROXY=
MINER_CONFIG=
XMR_STAK_CONFIG=
XMR_STAK_POOLS=
XMR_STAK_CPU=
XMR_STAK_NVIDIA=
# miner config directory:
MINER_CONFIG_DIR="${MINER_CONFIG_DIR:-$HOME/.config/xmr-mine}"
# miner directory:
MINER_DIR="/tmp/xmr-mine"
# script flags:
FLAG_DAEMON='false'
FLAG_DRYRUN='false'
FLAG_QUIET='false'
FLAG_RANDOM_POOL='false'
# default xmr-stak settings:
use_nicehash='false'
use_tls='false'
tls_fingerprint=''
currency='monero7'
call_timeout=10
retry_time=30
giveup_limit=0
verbose_level=4
print_motd='false'
h_print_time=60
aes_override='null'
use_slow_memory='warn'
tls_secure_algo='true'
daemon_mode='false'
flush_stdout='false'
output_file=''
httpd_port=16000
http_login=''
http_pass=''
prefer_ipv4='true'


##===========================  FUNCTIONS  ============================##
# Return internet connection status.
internet_check() {
    return `ping -q -c1 -W3 google.com &> /dev/null ||
        ping -q -c1 -W5 archlinux.org &> /dev/null`
}

# Return ntp sync status.
ntp_check() {
    return `timedatectl | grep 'clock synchronized: yes' >/dev/null`
}

# Printing functions.
miner_print() {
    if [ "$FLAG_QUIET" = 'false' ]; then
        printf ":: $1\n"
    fi
    return 0
}
miner_error() {
    if [ "$FLAG_QUIET" = 'false' ]; then
        printf ":! $1\n"
    fi
    return 0
}

# Kill miner (xmr-stak).
miner_kill() {
    local N=0
    if !(pgrep -x xmr-stak &>/dev/null); then
        miner_print "not mining"
        exit 1
    fi
    pkill xmr-stak &>/dev/null
    while (pgrep -x xmr-stak &>/dev/null) && [ $N -lt 10 ]; do
        sleep 1
        ((N++))
    done
    if [ $N -ge 10 ]; then
        miner_error "unable to kill xmr-stak"
        exit 2
    fi
    miner_print "killed xmr-stak"
    exit 0
}

# Print current pool status and hash rate.
miner_status() {
    local UP_TEXT=''
    local UP_MINS=
    local UP_HOURS=
    local UP_DAYS=
    local UP_SECS=
    local POOL_PING=
    local POOL_ADDRESS=
    local HASH_RATE=
    local JSON=
    local POOL_PASS=
    local POOL_CURRENCY=
    local WALLET=
    # check if even mining:
    if !(pgrep -x xmr-stak >/dev/null); then
        miner_print "not mining"
        exit 1
    fi

    # get api.json:
    JSON="`curl -s $HOSTNAME:${httpd_port}/api.json`"

    # hashrate:
    HASH_RATE="`grep -Po '"total": ?\[\K[^,]+(?=,)' <<< "$JSON"`"
    if [ "$HASH_RATE" = 'null' ]; then
        HASH_RATE='no data yet'
    fi

    # pool address:
    POOL_ADDRESS="`grep -Po '"pool": ?"\K[^":]+(?=(:|"))' <<< "$JSON"`"
    if [ "$POOL_ADDRESS" = 'not connected' ]; then
        POOL_ADDRESS='disconnected'
    fi

    # pool ping:
    POOL_PING="`grep -Po '"ping": ?\K[0-9]+(?=,)' <<< "$JSON"`"

    # calculate uptime:
    UP_SECS="`grep -Po '"uptime": ?\K[0-9]+(?=,)' <<< "$JSON"`"
    UP_DAYS=$(( $UP_SECS / 86400 ))
    UP_SECS=$(( $UP_SECS % 86400 ))
    UP_HOURS=$(( $UP_SECS / 3600 ))
    UP_SECS=$(( $UP_SECS % 3600 ))
    UP_MINS=$(( $UP_SECS / 60 ))
    UP_SECS=$(( $UP_SECS % 60 ))
    if [ $UP_DAYS -gt 0 ]; then
        UP_TEXT="${UP_DAYS}d "
    fi
    UP_TEXT+="`printf "%02d:%02d:%02d" $UP_HOURS $UP_MINS $UP_SECS`"

    # get wallet and pass from pools.txt:
    if [ -f "$MINER_DIR/pools.txt" ]; then
        POOL_PASS="`cat "$MINER_DIR/pools.txt" | \
            tr -d '\n' | \
            grep -Po ".*?\K{.*?${POOL_ADDRESS}.*?}(?=,)" | \
            grep -Pom1 '.*pool_password"\s?:\s?"\K[^"]*(?=")'`"
        WALLET="`cat "$MINER_DIR/pools.txt" | \
            tr -d '\n' | \
            grep -Po ".*?\K{.*?${POOL_ADDRESS}.*?}(?=,)" | \
            grep -Pom1 '.*wallet_address"\s?:\s?"\K[^"]*(?=")'`"

    # get wallet and pass from xmr-mine.conf:
    else
        POOL_CURRENCY="`grep -Po \
            "^\K[A-Z]+(?=_POOL=${POOL_ADDRESS})" "$MINER_CONFIG"`"
        WALLET="`grep -Po \
            "${POOL_CURRENCY}_WALLET=\K[^ ]+" "$MINER_CONFIG"`"
        POOL_PASS="`grep -Po '^ *MINER_PASS=\K[^ ]+' "$MINER_CONFIG"`"
        if [ -z "$POOL_PASS" ]; then
            POOL_PASS="$HOSTNAME"
        fi
    fi

    # print status:
    if [ "$FLAG_QUIET" = 'false' ]; then
        printf ":: wallet: $WALLET\n"
        printf "     pool: $POOL_ADDRESS\n"
        printf "       id: $POOL_PASS\n"
        printf "     ping: $POOL_PING\n"
        printf "   uptime: $UP_TEXT\n"
        printf " hashrate: $HASH_RATE\n"
    fi

    exit 0
}


##=============================  SCRIPT  =============================##
MINER_ACTION='mine'

# parse args:
while [ -n "$1" ]; do case "$1" in
    --background|-B)    FLAG_DAEMON='true'                      ;;
    --currency|-c)      shift; MINER_CURRENCY="$1"              ;;
    --dryrun|-D)        FLAG_DRYRUN='true'                      ;;
    --help|-H)          MINER_ACTION='help'                     ;;
    --kill|-K)          MINER_ACTION='kill'                     ;;
    --pool|-p)          shift; MINER_POOLS+=( "$1" )            ;;
    --proxy)            shift; MINER_PROXY="$1"                 ;;
    --pass)             shift; MINER_PASS="$1"                  ;;
    --quiet|-Q|-I)      FLAG_QUIET='true'; FLAG_DAEMON='true'   ;;
    --random-pool|-R)   FLAG_RANDOM_POOL='true'                 ;;
    --rig|-r)           shift; MINER_RIG="$1"                   ;;
    --status|-S)        MINER_ACTION='status'                   ;;
    --wallet|-w)        shift; MINER_WALLET="$1"                ;;
    # FAIL: unrecognized option:
    *)  printf ":! unrecognized option: $1\n"; exit 5           ;;
esac; shift; done

# check for config directory:
if [ -d "$MINER_CONFIG_DIR" ]; then
    # check xmr-mine.conf:
    if [ -f "$MINER_CONFIG_DIR/xmr-mine.conf" ]; then
        MINER_CONFIG="$MINER_CONFIG_DIR/xmr-mine.conf"
    # try to use xmr-mine.conf in git repo:
    else
        MINER_CONFIG="$DIR_SCRIPT/.xmr-mine/xmr-mine.conf"
    fi
# try to use config directory in git repo:
else
    MINER_CONFIG_DIR="$DIR_SCRIPT/.xmr-mine"
    MINER_CONFIG="$DIR_SCRIPT/.xmr-mine/xmr-mine.conf"
fi

# set xmr-stak config files:
XMR_STAK_CONFIG="$MINER_CONFIG_DIR/config.txt"
XMR_STAK_POOLS="$MINER_CONFIG_DIR/pools.txt"
XMR_STAK_CPU="$MINER_CONFIG_DIR/cpu.txt"
XMR_STAK_NVIDIA="$MINER_CONFIG_DIR/nvidia.txt"

# take miner action other than mining:
case $MINER_ACTION in
    help)       miner_help      ;;
    kill)       miner_kill      ;;
    status)     miner_status    ;;
esac

# FAIL: xmr-mine already running:
if [ "`pidof -x xmr-mine`" != "$$" ]; then
    miner_error "xmr-mine is already running"
    exit 0
fi
# FAIL: xmr-stak already running:
if [ "`pidof -x xmr-mine`" != "$$" ] || \
(pgrep -x xmr-stak &>/dev/null); then
    miner_error "xmr-stak is already running"
    exit 0
fi
# FAIL: no xmr-mine.conf:
if [ ! -f "$MINER_CONFIG" ]; then
    miner_error "xmr-mine.conf not found"
    exit 3
fi
# FAIL: no AES support:
if !(grep -P 'flags\s*:.* aes( |$)' /proc/cpuinfo &>/dev/null); then
    miner_error "CPU does not support AES"
    miner_print "unable to launch stak miner"
    exit 2
fi
# FAIL: no internet connection:
if !(internet_check); then
    miner_error "no internet connection"
    exit 1
fi

# set MINER_CURRENCY from MINER_CONFIG:
if [ -z "$MINER_CURRENCY" ]; then
    MINER_CURRENCY="`grep -Po \
        '^ *MINER_CURRENCY=\K[^ ]+' "$MINER_CONFIG"`"
    # FAIL: no currency specified:
    if [ -z "$MINER_CURRENCY" ]; then
        miner_error "no currency specified"
        exit 1
    fi
fi

# set currency from MINER_CURRENCY:
case "${MINER_CURRENCY,,}" in
    # currencies:
    bbscoin)        currency='bbscoin'
                    MINER_CURRENCY='BBS'        ;;
    bittube)        currency='bittube'
                    MINER_CURRENCY='TUBE'       ;;
    freehaven)      currency='freehaven'
                    MINER_CURRENCY='XFH'        ;;
    graft)          currency='graft'
                    MINER_CURRENCY='GRFT'       ;;
    haven)          currency='haven'
                    MINER_CURRENCY='XHV'        ;;
    intense)        currency='intensecoin'
                    MINER_CURRENCY='LTHN'       ;;
    intensecoin)    currency='intensecoin'
                    MINER_CURRENCY='LTHN'       ;;
    karbo)          currency='karbo'
                    MINER_CURRENCY='KRB'        ;;
    karbowanec)     currency='karbo'
                    MINER_CURRENCY='KRB'        ;;
    lethean)        currency='intensecoin'
                    MINER_CURRENCY='LTHN'       ;;
    masari)         currency='masari'
                    MINER_CURRENCY='MSR'        ;;
    monero)         currency='monero'
                    MINER_CURRENCY='XMR'        ;;
    stellite)       currency='stellite'
                    MINER_CURRENCY='XTL'        ;;
    sumokoin)       currency='sumokoin'
                    MINER_CURRENCY='SUMO'       ;;
    turtlecoin)     currency='turtlecoin'
                    MINER_CURRENCY='TRTL'       ;;
    # symbols:
    aeon)           currency='aeon7'
                    MINER_CURRENCY='AEON'       ;;
    bbs)            currency='bbscoin'
                    MINER_CURRENCY='BBS'        ;;
    grft)           currency='graft'
                    MINER_CURRENCY='GRFT'       ;;
    ipbc)           currency='ipbc'
                    MINER_CURRENCY='IPBC'       ;;
    krb)            currency='karbo'
                    MINER_CURRENCY='KRB'        ;;
    lthn)           currency='intensecoin'
                    MINER_CURRENCY='LTHN'       ;;
    msr)            currency='masari'
                    MINER_CURRENCY='MSR'        ;;
    qrl)            currency='qrl'
                    MINER_CURRENCY='QRL'        ;;
    ryo)            currency='ryo'
                    MINER_CURRENCY='RYO'        ;;
    sumo)           currency='sumokoin'
                    MINER_CURRENCY='SUMO'       ;;
    trtl)           currency='turtlecoin'
                    MINER_CURRENCY='TRTL'       ;;
    tube)           currency='bittube'
                    MINER_CURRENCY='TUBE'       ;;
    xfh)            currency='freehaven'
                    MINER_CURRENCY='XFH'        ;;
    xhv)            currency='haven'
                    MINER_CURRENCY='XHV'        ;;
    xmr)            currency='monero'
                    MINER_CURRENCY='XMR'        ;;
    xtl)            currency='stellite'
                    MINER_CURRENCY='XTL'        ;;
    # algorithms:
    cryptonight_bittube2)       currency='cyrptonight_bittube2'     ;;
    cryptonight)                currency='cryptonight'              ;;
    cryptonight_haven)          currency='cryptonight_haven'        ;;
    cryptonight_heavy)          currency='cryptonight_heavy'        ;;
    cryptonight_lite)           currency='cryptonight_lite'         ;;
    cryptonight_lite_v7)        currency='cryptonight_lite_v7'      ;;
    cryptonight_lite_v7_xor)    currency='cryptonight_lite_v7_xor'  ;;
    cryptonight_masari)         currency='cryptonight_masari'       ;;
    cryptonight_superfast)      currency='cryptonight_superfast'    ;;
    cryptonight_v7)             currency='cryptonight_v7'           ;;
    cryptonight_v8)             currency='cryptonight_v8'           ;;
    cryptonight_v7_stellite)    currency='cryptonight_v7_stellite'  ;;
esac

# parse miner password:
if [ -z "$MINER_PASS" ]; then
    MINER_PASS="`grep -Po '^ *MINER_PASS=\K[^ ]+' "$MINER_CONFIG"`"
    # fallback to HOSTNAME:
    if [ -z "$MINER_PASS" ]; then
        MINER_PASS="$HOSTNAME"
    fi
fi

# parse miner rig:
if [ -z "$MINER_RIG" ]; then
    MINER_RIG="`grep -Po '^ *MINER_RIG=\K[^ ]+' "$MINER_CONFIG"`"
fi

# parse wallet:
if [ -z "$MINER_WALLET" ]; then
    MINER_WALLET="`grep -Pom1 \
        "^ *${MINER_CURRENCY}_WALLET=\K[^ ]+" "$MINER_CONFIG"`"
    # FAIL: no wallet for specified currency:
    if [ -z "$MINER_WALLET" ]; then
        miner_error "no wallet for $MINER_CURRENCY"
        exit 1
    fi
fi

# parse pools:
MINER_POOLS+=( `grep -Po \
    "^ *${MINER_CURRENCY}_POOL=\K[^ ]+" "$MINER_CONFIG"` )

# FAIL: no pools for specified currency:
if [ ${#MINER_POOLS[@]} -eq 0 ]; then
    miner_error "no pools for $MINER_CURRENCY"
    exit 1
fi

# sort pools:
MINER_POOLS=( `for POOL in ${MINER_POOLS[@]}; \
    do printf "$POOL\n"; done | uniq` )
if [ "$FLAG_RANDOM_POOL" = 'true' ]; then
    MINER_POOLS=( `for POOL in ${MINER_POOLS[@]}; \
        do printf "$POOL\n"; done | sort -R` )
fi

# set daemon mode:
if [ "$FLAG_DAEMON" = 'true' ]; then
    daemon_mode='true'
    verbose_level=0
fi

# switch to clean miner directory:
mkdir -p "$MINER_DIR"
cd "$MINER_DIR"
rm -f config.txt pools.txt cpu.txt nvidia.txt amd.txt

# use preexisting config.txt:
if [ -f "$XMR_STAK_CONFIG" ]; then
    cp "$XMR_STAK_CONFIG" ./config.txt

# build new config.txt:
else
    CONFIG_TXT="\"call_timeout\" : $call_timeout,\n"
    CONFIG_TXT+="\"retry_time\" : $retry_time,\n"
    CONFIG_TXT+="\"giveup_limit\" : $giveup_limit,\n"
    CONFIG_TXT+="\"verbose_level\" : $verbose_level,\n"
    CONFIG_TXT+="\"print_motd\" : $print_motd,\n"
    CONFIG_TXT+="\"h_print_time\" : $h_print_time,\n"
    CONFIG_TXT+="\"aes_override\" : $aes_override,\n"
    CONFIG_TXT+="\"use_slow_memory\" : \"$use_slow_memory\",\n"
    CONFIG_TXT+="\"tls_secure_algo\" : $tls_secure_algo,\n"
    CONFIG_TXT+="\"daemon_mode\" : $daemon_mode,\n"
    CONFIG_TXT+="\"flush_stdout\" : $flush_stdout,\n"
    CONFIG_TXT+="\"output_file\" : \"$output_file\",\n"
    CONFIG_TXT+="\"httpd_port\" : $httpd_port,\n"
    CONFIG_TXT+="\"http_login\" : \"$http_login\",\n"
    CONFIG_TXT+="\"http_pass\" : \"$http_pass\",\n"
    CONFIG_TXT+="\"prefer_ipv4\" : $prefer_ipv4,\n"
    printf "$CONFIG_TXT" > config.txt
fi

# use preexisting pools.txt:
if [ -f "$XMR_STAK_POOLS" ]; then
    cp "$XMR_STAK_POOLS" ./pools.txt

# build new pools.txt:
else
    POOLS_TXT="\"pool_list\" :\n"
    POOLS_TXT+="[\n"
    P=${#MINER_POOLS[@]}
    if [ -n "$MINER_PROXY" ]; then
        ((P++))
        POOLS_TXT+="  {\n"
        POOLS_TXT+="    \"pool_address\" : \"${MINER_PROXY}\",\n"
        POOLS_TXT+="    \"pool_weight\" : $P,\n"
        POOLS_TXT+="    \"wallet_address\" : \"\",\n"
        POOLS_TXT+="    \"pool_password\" : \"proxy\",\n"
        POOLS_TXT+="    \"rig_id\" : \"\",\n"
        POOLS_TXT+="    \"use_nicehash\" : true,\n"
        POOLS_TXT+="    \"use_tls\" : $use_tls,\n"
        POOLS_TXT+="    \"tls_fingerprint\" : \"$tls_fing1erprint\"\n"
        POOLS_TXT+="  },\n"
        ((P--))
    fi
    for POOL in ${MINER_POOLS[@]}; do
        POOLS_TXT+="  {\n"
        POOLS_TXT+="    \"pool_address\" : \"$POOL\",\n"
        POOLS_TXT+="    \"pool_weight\" : $P,\n"
        POOLS_TXT+="    \"wallet_address\" : \"${MINER_WALLET}\",\n"
        POOLS_TXT+="    \"pool_password\" : \"${MINER_PASS}\",\n"
        POOLS_TXT+="    \"rig_id\" : \"${MINER_RIG}\",\n"
        POOLS_TXT+="    \"use_nicehash\" : $use_nicehash,\n"
        POOLS_TXT+="    \"use_tls\" : $use_tls,\n"
        POOLS_TXT+="    \"tls_fingerprint\" : \"$tls_fing1erprint\"\n"
        POOLS_TXT+="  },\n"
        ((P--))
    done
    POOLS_TXT+="],\n"
    POOLS_TXT+="\"currency\" : \"$currency\",\n"
    printf "$POOLS_TXT" > pools.txt
fi

# set timestamp on config.txt and pools.txt to prevent /tmp clearing:
if [[ "$MINER_DIR" =~ /tmp* ]]; then
    touch -d 'next year' config.txt
    touch -d 'next year' pools.txt
fi

# use preexisting cpu.txt:
if [ -f "$XMR_STAK_CPU" ]; then
    cp "$XMR_STAK_CPU" ./cpu.txt
fi

# use preexisting nvidia.txt:
if [ -f "$XMR_STAK_NVIDIA" ]; then
    cp "$XMR_STAK_NVIDIA" ./nvidia.txt
fi

# use preexisting GPU specific nvidia.txt:
GPU="`lspci | grep -Pom1 '^.*?VGA.+?controller:\s?\K.*'`"
GPU="${GPU,,}"
CONFIG_FILES="`ls "$MINER_CONFIG_DIR"`"
for FILE in $CONFIG_FILES; do
    FILE_GPU="${FILE%.txt}"
    FILE_GPU="${FILE_GPU//_/ }"
    FILE_GPU="${FILE_GPU,,}"
    if [[ "$GPU" =~ "${FILE_GPU}" ]]; then
        if [[ "$GPU" =~ 'nvidia' ]]; then
            cp "$MINER_CONFIG_DIR/$FILE" ./nvidia.txt
        elif [[ "$GPU" =~ 'radeon' ]]; then
            cp "$MINER_CONFIG_DIR/$FILE" ./amd.txt
        fi
    fi
done

# launch xmr-stak:
if [ "$FLAG_DRYRUN" = 'false' ]; then
    # daemon mode:
    if [ "$FLAG_DAEMON" = 'true' ]; then
        # daemon incognito mode:
        if [ "$FLAG_QUIET" = 'true' ]; then
            xmr-stak &>/dev/null &
            sleep 2
        # daemon normal mode:
        else
            xmr-stak &
            sleep 2
            miner_print "xmr-stak forked to background PID: $!\n"
        fi
    # normal mode:
    else
        xmr-stak
    fi
fi

exit 0
